class Solution {

    public List<List<Integer>> result;
    public List<Integer> list;
    public boolean[] flag;

    public void dfs(int[] candidates , int target , int index){

        if(target == 0){
            result.add(new ArrayList<>(list));
            return;
        }
        if(index >= candidates.length || target < 0 || target < candidates[index]){
            return;
        }
        for(int i = index ; i < candidates.length ; i++){
            if(i != 0 && flag[i-1] == false && candidates[i-1] == candidates[i]){
                continue;
            }
            flag[i] = true;
            list.add(candidates[i]);
            dfs(candidates , target - candidates[i] , i + 1);
            list.remove(list.size() - 1);
            flag[i] = false;
        }
        return ;

    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {

        result = new ArrayList<>();
        list = new ArrayList<>();
        flag = new boolean[candidates.length];
        int len = candidates.length;
        if(len <= 0){
            return result;
        }
        Arrays.sort(candidates);

        dfs(candidates , target , 0);
        return result;

    }
}
