class Solution {
    public int[][] updateMatrix(int[][] matrix) {

        int height = matrix.length;
        if(height == 0){
            return matrix;            
        }
        int width = matrix[0].length;
        if(width == 0){
            return matrix;
        }
        int[][] dp = new int[height][width];
        int temp ;

        // 从左上角到右下角
        for(int i = 0 ; i < height ; i++){
            if(matrix[i][0] != 0){
                if(i == 0){
                    dp[i][0] = 10001;
                }
                else{
                    dp[i][0] = dp[i-1][0] + 1; 
                }
            }
        }
        for(int j = 0 ; j < width ; j++){
            if(matrix[0][j] != 0){
                if(j == 0){
                    dp[0][j] = 10001;
                }
                else{
                    dp[0][j] = dp[0][j-1] + 1;
                }
            }
        }
        for(int i = 1 ; i < height ; i++){
            for(int j = 1 ; j < width ; j++){
                if(matrix[i][j] != 0){
                    temp = (dp[i-1][j] > dp[i][j-1])?dp[i][j-1]:dp[i-1][j];
                    dp[i][j] = (temp + 1 > dp[i-1][j-1] + 2)?dp[i-1][j-1] + 2:temp + 1;
                }
            }
        }

        // 从右下角开始
        for(int i = height - 2 ; i >= 0 ; i--){
            if(matrix[i][width-1] != 0){
                dp[i][width-1] = (dp[i][width-1] > dp[i+1][width-1] + 1)?dp[i+1][width-1]+1:dp[i][width-1];
            }
        }
        for(int j = width - 2 ; j >= 0 ; j--){
            if(matrix[height-1][j] != 0){
                dp[height-1][j] = (dp[height-1][j] > dp[height-1][j+1] + 1)?dp[height-1][j+1]+1:dp[height-1][j];
            }
        }
        for(int i = height - 2 ; i >= 0 ; i--){
            for(int j = width - 2 ; j >= 0 ; j--){
                if(matrix[i][j] != 0){
                    temp = (dp[i][j] > dp[i+1][j] + 1)?dp[i+1][j] + 1:dp[i][j];
                    temp = (temp > dp[i][j+1] + 1)?dp[i][j+1] + 1:temp;
                    dp[i][j] = (temp > dp[i+1][j+1] + 2)?dp[i+1][j+1]+2:temp;
                }
            }
        }
        return dp;
    }
}