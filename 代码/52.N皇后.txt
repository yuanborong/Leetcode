class Solution {

    public int res ;
    // public int[] position ;
    public boolean[] flagCol ;
    public boolean[] left ;
    public boolean[] right ;

    public void dfs(int rowIndex , int n ){
        if(rowIndex == n){
            res++ ;
            return ;
        }
        for(int j = 0 ; j < n ; j++){
            if(flagCol[j] == false && left[(n-1)+(j-rowIndex)] == false && right[((n-1)*2)-(j+rowIndex)] == false){
                flagCol[j] = true ;
                left[(n-1)+(j-rowIndex)] = true ;
                right[((n-1)*2)-(j+rowIndex)] = true ;
                dfs(rowIndex + 1 , n) ;
                flagCol[j] = false ;
                left[(n-1)+(j-rowIndex)] = false ;
                right[((n-1)*2)-(j+rowIndex)] = false ;
            }
        }
        return ;
    }

    public int totalNQueens(int n) {

        if(n <= 0) return 0 ;
        // position = new int[n] ;
        flagCol = new boolean[n] ;
        left = new boolean[n * 2 - 1] ;
        right = new boolean[n * 2 - 1] ;
        res = 0 ;
        dfs(0 , n) ;
        return res ;

    }
}