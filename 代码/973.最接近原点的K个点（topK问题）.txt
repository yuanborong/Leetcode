class Solution {

    public int getDistance(int a , int b){
        return a * a + b * b;
    }

    public int[][] kClosest(int[][] points, int K) {

        int len = points.length;
        if(len < K) return new int[1][2];

        int[][] res = new int[K][2];
        
        int[] distance = new int[len];
        for(int i = 0 ; i < len ; i++){
            distance[i] = getDistance(points[i][0] , points[i][1]);
        }
        PriorityQueue<Integer> heap = new PriorityQueue<>(new Comparator<Integer>(){
            @Override
            public int compare(Integer a , Integer b){
                return distance[b] - distance[a];
            }
        });

        for(int i = 0 ; i < len ; i++){
            if(heap.size() < K){
                heap.add(i);
            }
            else{
                if(distance[heap.peek()] > distance[i]){
                    heap.remove();
                    heap.add(i);
                }
            }
        }
        for(int i = 0 ; i < K ; i++){
            res[i] = points[heap.remove()];
        }
        return res;

    }
}