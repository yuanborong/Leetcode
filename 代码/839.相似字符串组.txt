class Solution {

    public int[] parents ;

    public int numSimilarGroups(String[] strs) {

        int len = strs.length ;
        if(len <= 0) return 0 ;
        int strLength = strs[0].length() ;
        parents = new int[len] ;
        for(int i = 0 ; i < len ; i++) parents[i] = i ;
        int res = len ;
        boolean flag ;
        for(int i = 0 ; i < len ; i++){
            for(int j = i + 1 ; j < len ; j++){
                if(isEquals(strs[i] , strs[j] , strLength)){
                    flag = union(i , j) ;
                    if(flag == true) res-- ;
                }                
            }
        }

        return res ;

    }

    public int find(int x){
        return (x == parents[x]) ? x : (parents[x] = find(parents[x])) ;
    }

    public boolean union(int x , int y){
        int parentX = find(x) ;
        int parentY = find(y) ;
        if(parentX == parentY) return false ;
        parents[parentX] = parentY ;
        return true ;
    }

    public boolean isEquals(String a , String b , int len){
        int count = 0 ;
        for(int i = 0 ; i < len ; i++){
            if(a.charAt(i) != b.charAt(i)){
                count++;
            }
            if(count > 2){
                return false ;
            }
        }
        return true ;
    }

}