class Solution {

    boolean[][] flag ;

    public void dfs(int i , int j , int height , int width , char[][] board){
        if(i < 0 || j < 0 || i >= height || j >= width || board[i][j] == 'X' || flag[i][j] == true){
            return ;
        }
        flag[i][j] = true ;
        dfs(i - 1 , j , height , width , board) ;
        dfs(i , j - 1 , height , width , board) ;
        dfs(i + 1 , j , height , width , board) ;
        dfs(i , j + 1 , height , width , board) ;
        return ;
    }

    public void solve(char[][] board) {

        int height = board.length ;
        if(height <= 0) return ;
        int width = board[0].length ;
        if(width <= 0) return ;
        
        flag = new boolean[height][width] ;
        for(int i = 0 ; i < width ; i++){
            dfs(0 , i , height , width , board) ;
        }
        for(int i = 1 ; i < height ; i++){
            dfs(i , width - 1 , height , width , board) ;
        }
        for(int i = width - 2 ; i >= 0 ; i--){
            dfs(height - 1 , i , height , width , board) ;
        }
        for(int i = height - 2 ; i >= 0 ; i--){
            dfs(i , 0 , height , width , board) ;
        }

        for(int i = 0 ; i < height ; i++){
            for(int j = 0 ; j < width ; j++){
                if(board[i][j] == 'O' && flag[i][j] == false){
                    board[i][j] = 'X' ;
                }
            }
        }

        return ;

    }
}