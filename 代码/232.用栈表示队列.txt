class MyQueue {

    private Stack<Integer> s;
    private int front_number ;

    /** Initialize your data structure here. */
    public MyQueue() {
        this.s = new Stack<>();
        this.front_number = -1;
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        s.push(x);
        if(s.size() == 1){
            this.front_number = x;
        }
        return;
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        Stack<Integer> temp = new Stack<>();
        while(s.size() != 1){
            temp.push(s.pop());
        }
        int res = s.pop();
        if(temp.size() != 0){
            this.front_number = temp.peek();
        }
        else{
            this.front_number = -1;
        }
        while(temp.size() != 0){
            s.push(temp.pop());
        }
        return res;
    }
    
    /** Get the front element. */
    public int peek() {
        return front_number;
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return this.s.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */