class Solution {

    private void adjustHeap(int[] nums , int start , int end){

        if(start >= end){
            return ;
        }
        int child = start * 2 + 1;
        int temp = nums[start];
        while(child <= end){
            if(child + 1 <= end && nums[child+1] > nums[child]) child++;
            if(nums[child] <= temp) break;
            nums[start] = nums[child];
            start = child;
            child = start * 2 + 1;
        }
        nums[start] = temp;
        return;
    }

    private void swap(int[] nums , int i , int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
        return;
    }

    private void heapSort(int[] nums){
        int len = nums.length;
        for(int i = (len/2 - 1) ; i >= 0 ; i--){
            adjustHeap(nums , i , len - 1);
        }

        for(int i = len - 1 ; i >= 1 ; i--){
            swap(nums , 0 , i);
            adjustHeap(nums , 0 , i-1);
        }

        return;

    }

    public int[] sortArray(int[] nums) {
        
        int len = nums.length;
        if(len <= 1){
            return nums;
        }
        heapSort(nums);
        return nums;
    }
}