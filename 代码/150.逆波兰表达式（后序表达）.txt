// 逆波兰表达式：

// 逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。

// 平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
// 该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
// 逆波兰表达式主要有以下两个优点：

// 去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
// 适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。


class Solution {

    public int evalRPN(String[] tokens) {

        int len = tokens.length ;
        if(len <= 0) return 0;

        Stack<Integer> optNum = new Stack<>();
        char ch;
        int op1 , op2 ;
        for(String str : tokens){
            ch = str.charAt(0) ;
            if((ch >= '0' && ch <= '9') || (ch == '-' && str.length() > 1)){
                optNum.push(Integer.valueOf(str));
            }
            else{
                op2 = optNum.pop();
                op1 = optNum.pop();
                if(ch == '+'){
                    optNum.push(op1 + op2);
                }
                if(ch == '-'){
                    optNum.push(op1 - op2);
                }
                if(ch == '*'){
                    optNum.push(op1 * op2);
                }
                if(ch == '/'){
                    optNum.push(op1 / op2);
                }
            }
        } 

        return optNum.pop();

    }
}