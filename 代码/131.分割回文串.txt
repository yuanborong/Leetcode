class Solution {

    public List<List<String>> res ; 
    String str ;
    boolean[][] flag ;
    List<String> newList ;

    public void dfs(int start , int len){
        if(start == len){
            res.add(new ArrayList<>(newList));
            return ; 
        }
        for(int end = start ; end < len ; end++){
            if(flag[start][end]){
                String temp = str.substring(start , end+1);
                newList.add(temp) ;
                dfs(end+1 , len) ;
                newList.remove(newList.size()-1);
            }
        }
        return ;
    }

    public List<List<String>> partition(String s) {

        char[] arrS = s.toCharArray();
        int len = arrS.length ;
        res = new ArrayList<>();
        str = s ;
        if(len <= 0) return res ;

        flag = new boolean[len][len] ;

        for(int k = 0 ; k < len ; k++){
            for(int i = 0 , j = k ; j < len ; i++ , j++){
                if(i == j){
                    flag[i][j] = true ;
                }
                else if(arrS[i] == arrS[j] && (flag[i+1][j-1] == true || i == j - 1)){
                    flag[i][j] = true ;
                }
            }
        }
        newList = new ArrayList<>() ;
        dfs(0 , len);
        return res;

    }
}