/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        
        if(root == null){
            return null;
        }

        Queue<Node> q_node = new LinkedList<>();
        Queue<Integer> q_depth = new LinkedList<>();
        int cur_depth , pre_depth;
        Node pre_node = root; 
        Node cur_node = new Node();
        q_node.add(root);
        q_depth.add(1);
        pre_depth = 1;
        while(q_node.isEmpty() == false){
            cur_depth = q_depth.remove();
            cur_node = q_node.remove();
            if(cur_depth != pre_depth){
                pre_node.next = null;
            }
            else{
                pre_node.next = cur_node;
            }
            if(cur_node.left != null){
                q_node.add(cur_node.left);
                q_depth.add(cur_depth+1);
            }
            if(cur_node.right != null){
                q_node.add(cur_node.right);
                q_depth.add(cur_depth+1);
            }
            pre_node = cur_node;
            pre_depth = cur_depth;
        }
        cur_node.next = null;
        return root;
    }
}