/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    public double getMean(List<Integer> list){
        double res = 0;
        for(int i : list){
            res += i;
        }
        return res / list.size();
    }

    public List<Double> averageOfLevels(TreeNode root) {

        List<Double> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        LinkedList<TreeNode> node_queue = new LinkedList<>();
        LinkedList<Integer> degree_queue = new LinkedList<>();
        List<Integer> cur_list = new ArrayList<>();
        TreeNode cur_node;
        int cur_degree = 1;
        int pre_degree = 0;
        double  mean ;
        node_queue.add(root);
        degree_queue.add(cur_degree);
        while(node_queue.isEmpty() == false){
            cur_node = node_queue.remove();
            cur_degree = degree_queue.remove();
            if(cur_degree != pre_degree){
                if(pre_degree != 0){
                    mean = getMean(cur_list);
                    res.add(mean);
                }
                cur_list = new ArrayList<>();
            }
            cur_list.add(cur_node.val);
            if(cur_node.left != null){
                node_queue.add(cur_node.left);
                degree_queue.add(cur_degree+1);
            }
            if(cur_node.right != null){
                node_queue.add(cur_node.right);
                degree_queue.add(cur_degree+1);
            }
            pre_degree = cur_degree;
        }
        mean = getMean(cur_list);
        res.add(mean);
        return res;

    }
}