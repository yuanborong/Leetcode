/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {

    public Map<Node , Node> map ;

    public void dfs(Node node){
        if(node == null) return ;
        if(map.containsKey(node) == false){
            Node newNode = new Node(node.val);
            map.put(node , newNode) ;
            for(Node neighbor : node.neighbors){
                dfs(neighbor) ;
                newNode.neighbors.add(map.get(neighbor)) ;
            }
        }
    }

    public Node cloneGraph(Node node) {
        
        if(node == null) return null ;
        map = new HashMap<>() ;

        dfs(node) ;
        return map.get(node) ;

    }
}