class Solution {

    private List<List<Integer>> res;
    private List<Integer> temp;
    private boolean[] flag;

    public void dfs(int[] nums){
        if(temp.size() == nums.length){
            // System.out.println(temp.size());
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i = 0 ; i < nums.length ; i++){
            if(flag[i] == false){
                flag[i] = true;
                temp.add(nums[i]);
                // System.out.println(temp.get(temp.size()-1));
                dfs(nums);
                temp.remove(temp.size() - 1);
                flag[i] = false;
            }
        }
        return;
    }

    public List<List<Integer>> permute(int[] nums) {

        res = new ArrayList<>();
        int len = nums.length;
        if(len <= 0){
            return res;
        }
        flag = new boolean[len];
        temp = new ArrayList<>();
        dfs(nums);
        return res;
    }
}