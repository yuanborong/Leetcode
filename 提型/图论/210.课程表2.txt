class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {

        int len = prerequisites.length;
        int[] res = new int[numCourses];
        if(len <= 0){
            for(int i = 0 ; i < numCourses ; i++){
                res[i] = i;
            }
            return res;
        }
        List<Integer> list = new ArrayList<>();
        Deque<Integer> zero_indegree = new LinkedList<>();
        int[] indegree = new int[numCourses];
        int[][] edge = new int[numCourses][numCourses];
        for(int i = 0 ; i < len ; i++){
            indegree[prerequisites[i][0]]++;
            edge[prerequisites[i][1]][prerequisites[i][0]]++;
            if(edge[prerequisites[i][1]][prerequisites[i][0]] > 1) return new int[0];
        }
        for(int i = 0 ; i < numCourses ; i++){
            if(indegree[i] == 0) zero_indegree.add(i);
        }
        
        while(zero_indegree.isEmpty() == false){
            int cur_cource = zero_indegree.remove();
            list.add(cur_cource);
            for(int j = 0 ; j < numCourses ; j++){
                if(edge[cur_cource][j] == 1){
                    indegree[j]--;
                    if(indegree[j] == 0) zero_indegree.add(j);
                }
            }
        }

        if(list.size() < numCourses) return new int[0];
        for(int i = numCourses - 1 ; i >= 0 ; i--){
            res[i] = list.get(i);
        }
        return res;
    }
}