class Solution {
    public int maxProfit(int k, int[] prices) {

        int len = prices.length;
        if(len <= 1) return 0;

        // dp动归存储的是当前最大的利润
        // 第一维：考虑第i天的股票价格
        // 第二维：最多进行j次的操作
        // 第三维：0代表未持有，1代表持有
        int[][] dp = new int[k + 1][2];
        int[][] pre = new int[k + 1][2];

        // 初始化数组
        // 需要将数组初始化最小的负数，因为买入的时候是可能是负数的
        // 如果初始化0，那么就会选择0，而不选择某一天买入
        for(int j = 0 ; j <= k ; j++){
            dp[j][1] = Integer.MIN_VALUE;
            pre[j][1] = Integer.MIN_VALUE;
        }
        
        for(int i = 1 ; i <= len ; i++){
            for(int j = 1 ; j <= k ; j++){
                dp[j][0] = Math.max(pre[j][0] , pre[j][1] + prices[i-1]);
                dp[j][1] = Math.max(pre[j][1] , pre[j-1][0] - prices[i-1]);
            }
            // 对二维数组进行深拷贝
            for(int j = 0 ; j <= k ; j++){
                pre[j] = Arrays.copyOf(dp[j] , dp[j].length);
            }
        }

        int res = Math.max(dp[k][0] , dp[k][1]);
        return Math.max(res , 0);

    }
}