class Solution {
    public String reorganizeString(String S) {

        int len = S.length();
        char[] arr_t = S.toCharArray();
        if(len <= 1) return S;  
        StringBuilder sb = new StringBuilder();
        int[] count = new int[26];
        Character[] arr = new Character[len];
        char ch ;
        for(int i = 0 ; i < len ; i++){
            ch = arr_t[i];
            count[ch-'a']++;
            arr[i] = new Character(ch);
        }
        // Character[] temp = Arrays.stream(arr_t).boxed().toArray(Character[]::new);
        // Character[] arr = ArrayUtils.toObject(arr_t);
        Arrays.sort(arr , new Comparator<Character>(){
            @Override
            public int compare(Character a , Character b){
                if(count[b-'a'] == count[a-'a']) return (a - b);
                return count[b-'a'] - count[a-'a']; 
            }
        });
        int right_index = (len % 2 == 0)?(len / 2):(len / 2 + 1);
        int left_index = 0 , left_end_index = right_index;
        // for(int i = 0 ; i < len ; i++){
        //     System.out.println(arr[i]);
        // }
        if(arr[right_index].equals(arr[0])) return "";
        while(left_index < left_end_index || right_index < len){
            if(left_index < left_end_index) sb.append(arr[left_index++]);
            if(right_index < len) sb.append(arr[right_index++]);
        } 
        if(right_index < len) sb.append(arr[right_index]);
        return sb.toString();

    }
}