//题解：https://leetcode-cn.com/problems/find-median-from-data-stream/solution/shuang-er-cha-dui-ji-qiao-xiang-jie-by-labuladong/

class MedianFinder {

    PriorityQueue<Integer> small;
    PriorityQueue<Integer> big;

    /** initialize your data structure here. */
    public MedianFinder() {

        small = new PriorityQueue<>(new Comparator<Integer>(){
            @Override
            public int compare(Integer a , Integer b){
                return b - a;
            }
        });
        big = new PriorityQueue<>();

    }
    
    public void addNum(int num) {

        if(small.size() >= big.size()){
            small.add(num);
            big.add(small.poll());
        }
        else{
            big.add(num);
            small.add(big.poll());
        }

    }
    
    public double findMedian() {

        if(small.size() > big.size()){
            return small.peek();
        }
        else if(small.size() < big.size()){
            return big.peek();
        }
        else{
            return ((double)big.peek() + (double)small.peek()) / 2 ;
        }

    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */