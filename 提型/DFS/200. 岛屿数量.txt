class Solution {
public:

    void dfs(vector<vector<char>> &grid , int x , int y){
            grid[x][y] = '0';
            if(x > 0 &&  grid[x-1][y] == '1'){
                dfs(grid ,x-1 , y);
            }
            if(x < grid.size() - 1 && grid[x+1][y] == '1'){
                dfs(grid ,x + 1 , y);
            }
            if(y > 0 && grid[x][y-1] == '1'){
                dfs(grid ,x , y - 1);
            }
            if(y < grid[0].size() - 1 && grid[x][y+1] == '1'){
                dfs(grid ,x , y + 1);
            }
        return;
    }

    int numIslands(vector<vector<char>>& grid) {
        
        int height = grid.size();
        if(height == 0){
            return 0;
        }
        int width = grid[0].size();
        if(width == 0){
            return 0;
        }
        int count = 0 ;
        // vector<vector<bool>> flag(height , vector<bool>(width , false));
        for(int i = 0 ; i < height ; i++){
            for(int j = 0 ; j < width ; j++){
                if(grid[i][j] == '1'){
                    count++;
                    dfs(grid , i , j);
                }
            }
        }
        return count;
    }
};