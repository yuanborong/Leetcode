class Solution {
public:

    void partion(vector<int> &nums , int start , int end , int k , int &index){

        if(start > end || index != -1){
            return ;
        }
        if(start == end){
            if(start + 1 == k){
                index = start;
                
            }
            return;
        }
        int left = start , right = end;
        int temp = nums[left];

        while(left < right){
            while(left < right && nums[right] <= temp){
                right--;
            }
            nums[left] = nums[right];
            while(left < right && nums[left] > temp){
                left++;
            }
            nums[right] = nums[left];
        }

        nums[left] = temp;
        if(left == k - 1){
            index = left;
            return;
        }
        partion(nums , start , left - 1 , k , index);
        partion(nums , left + 1 , end , k , index);
        return ;
    }

    int findKthLargest(vector<int>& nums, int k) {

        int len = nums.size();
        if(len == 0 || k > len){
            return 0;
        }
        int index = -1;
        partion(nums , 0 , len - 1 , k , index);
        return (index == -1)?0:nums[index];

    }
};