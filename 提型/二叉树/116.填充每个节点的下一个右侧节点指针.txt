/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        
        if(root == null){
            return null;
        }
        Node cur_node = root;
        Node pre;
        while(cur_node != null){
            Node start = new Node();
            start.next = cur_node.left;
            pre = start ;
            while(cur_node != null){
                if(cur_node.left != null){
                    pre.next = cur_node.left;
                    pre = pre.next;
                }
                if(cur_node.right != null){
                    pre.next = cur_node.right;
                    pre = pre.next;
                }
                cur_node = cur_node.next;
            }
            cur_node = start.next;
        }
        return root;
    }
}