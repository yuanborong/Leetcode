class Solution {

    public boolean[][] flag;
    public boolean res;

    public void dfs(char[][] board , String word , int i , int j , int index){
        if(index == word.length()){
            res = true;
            return;
        }
        if(res == true || i < 0 || i >= board.length || j < 0 || j >= board[0].length || flag[i][j] == true || board[i][j] != word.charAt(index) ){
            return;
        }
        flag[i][j] = true;
        dfs(board , word , i + 1 , j , index+1);
        dfs(board , word , i - 1 , j , index+1);
        dfs(board , word , i , j - 1 , index+1);
        dfs(board , word , i , j + 1 , index+1);
        flag[i][j] = false;
        return;
        
    }


    public boolean exist(char[][] board, String word) {

        int height = board.length;
        if(height <= 0){
            return false;
        }
        int width = board[0].length;
        if(width <= 0){
            return false;
        }

        int len = word.length();
        if(len == 0){
            return true;
        }
        flag = new boolean[height][width];

        for(int i = 0 ; i < height ; i++){
            for(int j = 0 ; j < width ; j++){
                dfs(board , word , i , j , 0);
            }
        }

        return res;
    }
}